/*
'===============================================================================
'  Generated From - CSharp_dOOdads_View.vbgen
'
'  The supporting base class SqlClientEntity is in the 
'  Architecture directory in "dOOdads".
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace cfdiPeru
{
	public class vwCfdClienteDireccionesCorreo : SqlClientEntity
	{
		public vwCfdClienteDireccionesCorreo()
		{
			this.QuerySource = "vwCfdClienteDireccionesCorreo";
			this.MappingName = "vwCfdClienteDireccionesCorreo";
		}	
		//25/01/11 jcf Crea constructor con cadena de conexión
		public vwCfdClienteDireccionesCorreo(string connstr)
		{
            this.ConnectionString = connstr;
			this.QuerySource = "vwCfdClienteDireccionesCorreo";
			this.MappingName = "vwCfdClienteDireccionesCorreo";
		}	
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			return base.Query.Load();
		}
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
	
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter CUSTNMBR
			{
				get
				{
					return new SqlParameter("@CUSTNMBR", SqlDbType.Char, 15);
				}
			}
			
			public static SqlParameter EmailTo
			{
				get
				{
					return new SqlParameter("@EmailTo", SqlDbType.NVarChar, 1073741823);
				}
			}
			
			public static SqlParameter EmailCC
			{
				get
				{
					return new SqlParameter("@EmailCC", SqlDbType.NVarChar, 1073741823);
				}
			}
			
			public static SqlParameter EmailCCO
			{
				get
				{
					return new SqlParameter("@EmailCCO", SqlDbType.NVarChar, 1073741823);
				}
			}
			
		}
		#endregion	
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string CUSTNMBR = "CUSTNMBR";
            public const string EmailTo = "emailTo";
            public const string EmailCC = "emailCC";
            public const string EmailCCO = "emailCCO";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[CUSTNMBR] = vwCfdClienteDireccionesCorreo.PropertyNames.CUSTNMBR;
					ht[EmailTo] = vwCfdClienteDireccionesCorreo.PropertyNames.EmailTo;
					ht[EmailCC] = vwCfdClienteDireccionesCorreo.PropertyNames.EmailCC;
					ht[EmailCCO] = vwCfdClienteDireccionesCorreo.PropertyNames.EmailCCO;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string CUSTNMBR = "CUSTNMBR";
            public const string EmailTo = "EmailTo";
            public const string EmailCC = "EmailCC";
            public const string EmailCCO = "EmailCCO";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[CUSTNMBR] = vwCfdClienteDireccionesCorreo.ColumnNames.CUSTNMBR;
					ht[EmailTo] = vwCfdClienteDireccionesCorreo.ColumnNames.EmailTo;
					ht[EmailCC] = vwCfdClienteDireccionesCorreo.ColumnNames.EmailCC;
					ht[EmailCCO] = vwCfdClienteDireccionesCorreo.ColumnNames.EmailCCO;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string CUSTNMBR = "s_CUSTNMBR";
            public const string EmailTo = "s_EmailTo";
            public const string EmailCC = "s_EmailCC";
            public const string EmailCCO = "s_EmailCCO";

		}
		#endregion	
		
		#region Properties
			public virtual string CUSTNMBR
	    {
			get
	        {
				return base.Getstring(ColumnNames.CUSTNMBR);
			}
			set
	        {
				base.Setstring(ColumnNames.CUSTNMBR, value);
			}
		}

		public virtual string EmailTo
	    {
			get
	        {
				return base.Getstring(ColumnNames.EmailTo);
			}
			set
	        {
				base.Setstring(ColumnNames.EmailTo, value);
			}
		}

		public virtual string EmailCC
	    {
			get
	        {
				return base.Getstring(ColumnNames.EmailCC);
			}
			set
	        {
				base.Setstring(ColumnNames.EmailCC, value);
			}
		}

		public virtual string EmailCCO
	    {
			get
	        {
				return base.Getstring(ColumnNames.EmailCCO);
			}
			set
	        {
				base.Setstring(ColumnNames.EmailCCO, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_CUSTNMBR
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CUSTNMBR) ? string.Empty : base.GetstringAsString(ColumnNames.CUSTNMBR);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CUSTNMBR);
				else
					this.CUSTNMBR = base.SetstringAsString(ColumnNames.CUSTNMBR, value);
			}
		}

		public virtual string s_EmailTo
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.EmailTo) ? string.Empty : base.GetstringAsString(ColumnNames.EmailTo);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.EmailTo);
				else
					this.EmailTo = base.SetstringAsString(ColumnNames.EmailTo, value);
			}
		}

		public virtual string s_EmailCC
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.EmailCC) ? string.Empty : base.GetstringAsString(ColumnNames.EmailCC);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.EmailCC);
				else
					this.EmailCC = base.SetstringAsString(ColumnNames.EmailCC, value);
			}
		}

		public virtual string s_EmailCCO
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.EmailCCO) ? string.Empty : base.GetstringAsString(ColumnNames.EmailCCO);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.EmailCCO);
				else
					this.EmailCCO = base.SetstringAsString(ColumnNames.EmailCCO, value);
			}
		}


		#endregion			
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter CUSTNMBR
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CUSTNMBR, Parameters.CUSTNMBR);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter EmailTo
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.EmailTo, Parameters.EmailTo);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter EmailCC
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.EmailCC, Parameters.EmailCC);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter EmailCCO
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.EmailCCO, Parameters.EmailCCO);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter CUSTNMBR
		    {
				get
		        {
					if(_CUSTNMBR_W == null)
	        	    {
						_CUSTNMBR_W = TearOff.CUSTNMBR;
					}
					return _CUSTNMBR_W;
				}
			}

			public WhereParameter EmailTo
		    {
				get
		        {
					if(_EmailTo_W == null)
	        	    {
						_EmailTo_W = TearOff.EmailTo;
					}
					return _EmailTo_W;
				}
			}

			public WhereParameter EmailCC
		    {
				get
		        {
					if(_EmailCC_W == null)
	        	    {
						_EmailCC_W = TearOff.EmailCC;
					}
					return _EmailCC_W;
				}
			}

			public WhereParameter EmailCCO
		    {
				get
		        {
					if(_EmailCCO_W == null)
	        	    {
						_EmailCCO_W = TearOff.EmailCCO;
					}
					return _EmailCCO_W;
				}
			}

			private WhereParameter _CUSTNMBR_W = null;
			private WhereParameter _EmailTo_W = null;
			private WhereParameter _EmailCC_W = null;
			private WhereParameter _EmailCCO_W = null;

			public void WhereClauseReset()
			{
				_CUSTNMBR_W = null;
				_EmailTo_W = null;
				_EmailCC_W = null;
				_EmailCCO_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter CUSTNMBR
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CUSTNMBR, Parameters.CUSTNMBR);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter EmailTo
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.EmailTo, Parameters.EmailTo);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter EmailCC
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.EmailCC, Parameters.EmailCC);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter EmailCCO
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.EmailCCO, Parameters.EmailCCO);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter CUSTNMBR
		    {
				get
		        {
					if(_CUSTNMBR_W == null)
	        	    {
						_CUSTNMBR_W = TearOff.CUSTNMBR;
					}
					return _CUSTNMBR_W;
				}
			}

			public AggregateParameter EmailTo
		    {
				get
		        {
					if(_EmailTo_W == null)
	        	    {
						_EmailTo_W = TearOff.EmailTo;
					}
					return _EmailTo_W;
				}
			}

			public AggregateParameter EmailCC
		    {
				get
		        {
					if(_EmailCC_W == null)
	        	    {
						_EmailCC_W = TearOff.EmailCC;
					}
					return _EmailCC_W;
				}
			}

			public AggregateParameter EmailCCO
		    {
				get
		        {
					if(_EmailCCO_W == null)
	        	    {
						_EmailCCO_W = TearOff.EmailCCO;
					}
					return _EmailCCO_W;
				}
			}

			private AggregateParameter _CUSTNMBR_W = null;
			private AggregateParameter _EmailTo_W = null;
			private AggregateParameter _EmailCC_W = null;
			private AggregateParameter _EmailCCO_W = null;

			public void AggregateClauseReset()
			{
				_CUSTNMBR_W = null;
				_EmailTo_W = null;
				_EmailCC_W = null;
				_EmailCCO_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
			return null;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
			return null;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
			return null;
		}
	}
}
