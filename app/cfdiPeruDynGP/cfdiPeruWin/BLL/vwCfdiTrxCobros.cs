/*
'===============================================================================
'  Generated From - CSharp_dOOdads_View.vbgen
'
'  The supporting base class SqlClientEntity is in the 
'  Architecture directory in "dOOdads".
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace EjecutableEncriptador
{
	public class vwCfdiTrxCobros : SqlClientEntity
	{
		public vwCfdiTrxCobros()
		{
			this.QuerySource = "vwCfdiTrxCobros";
			this.MappingName = "vwCfdiTrxCobros";
		}	
	
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			return base.Query.Load();
		}
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
	
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter EstadoContabilizado
			{
				get
				{
					return new SqlParameter("@EstadoContabilizado", SqlDbType.VarChar, 13);
				}
			}
			
			public static SqlParameter Soptype
			{
				get
				{
					return new SqlParameter("@Soptype", SqlDbType.SmallInt, 0);
				}
			}
			
			public static SqlParameter Docid
			{
				get
				{
					return new SqlParameter("@Docid", SqlDbType.VarChar, 5);
				}
			}
			
			public static SqlParameter Sopnumbe
			{
				get
				{
					return new SqlParameter("@Sopnumbe", SqlDbType.Char, 21);
				}
			}
			
			public static SqlParameter Fechahora
			{
				get
				{
					return new SqlParameter("@Fechahora", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter CUSTNMBR
			{
				get
				{
					return new SqlParameter("@CUSTNMBR", SqlDbType.Char, 15);
				}
			}
			
			public static SqlParameter NombreCliente
			{
				get
				{
					return new SqlParameter("@NombreCliente", SqlDbType.Char, 65);
				}
			}
			
			public static SqlParameter IdImpuestoCliente
			{
				get
				{
					return new SqlParameter("@IdImpuestoCliente", SqlDbType.Char, 25);
				}
			}
			
			public static SqlParameter Total
			{
				get
				{
					return new SqlParameter("@Total", SqlDbType.Decimal, 0);
				}
			}
			
			public static SqlParameter MontoActualOriginal
			{
				get
				{
					return new SqlParameter("@MontoActualOriginal", SqlDbType.Decimal, 0);
				}
			}
			
			public static SqlParameter Voidstts
			{
				get
				{
					return new SqlParameter("@Voidstts", SqlDbType.SmallInt, 0);
				}
			}
			
			public static SqlParameter Estado
			{
				get
				{
					return new SqlParameter("@Estado", SqlDbType.VarChar, 20);
				}
			}
			
			public static SqlParameter Mensaje
			{
				get
				{
					return new SqlParameter("@Mensaje", SqlDbType.VarChar, 255);
				}
			}
			
			public static SqlParameter ComprobanteXml
			{
				get
				{
					return new SqlParameter("@ComprobanteXml", SqlDbType.Xml, 1073741823);
				}
			}
			
			public static SqlParameter SelloCFD
			{
				get
				{
					return new SqlParameter("@SelloCFD", SqlDbType.VarChar, 8000);
				}
			}
			
			public static SqlParameter FechaTimbrado
			{
				get
				{
					return new SqlParameter("@FechaTimbrado", SqlDbType.VarChar, 20);
				}
			}
			
			public static SqlParameter UUID
			{
				get
				{
					return new SqlParameter("@UUID", SqlDbType.VarChar, 50);
				}
			}
			
			public static SqlParameter NoCertificadoSAT
			{
				get
				{
					return new SqlParameter("@NoCertificadoSAT", SqlDbType.VarChar, 20);
				}
			}
			
			public static SqlParameter Version
			{
				get
				{
					return new SqlParameter("@Version", SqlDbType.VarChar, 5);
				}
			}
			
			public static SqlParameter SelloSAT
			{
				get
				{
					return new SqlParameter("@SelloSAT", SqlDbType.VarChar, 8000);
				}
			}
			
			public static SqlParameter FormaDePago
			{
				get
				{
					return new SqlParameter("@FormaDePago", SqlDbType.VarChar, 50);
				}
			}
			
			public static SqlParameter Sello
			{
				get
				{
					return new SqlParameter("@Sello", SqlDbType.VarChar, 8000);
				}
			}
			
			public static SqlParameter NoCertificado
			{
				get
				{
					return new SqlParameter("@NoCertificado", SqlDbType.VarChar, 20);
				}
			}
			
			public static SqlParameter CadenaOriginalSAT
			{
				get
				{
					return new SqlParameter("@CadenaOriginalSAT", SqlDbType.VarChar, 8000);
				}
			}
			
			public static SqlParameter ID_Certificado
			{
				get
				{
					return new SqlParameter("@ID_Certificado", SqlDbType.VarChar, 21);
				}
			}
			
			public static SqlParameter Ruta_certificado
			{
				get
				{
					return new SqlParameter("@Ruta_certificado", SqlDbType.VarChar, 251);
				}
			}
			
			public static SqlParameter Ruta_clave
			{
				get
				{
					return new SqlParameter("@Ruta_clave", SqlDbType.VarChar, 251);
				}
			}
			
			public static SqlParameter Contrasenia_clave
			{
				get
				{
					return new SqlParameter("@Contrasenia_clave", SqlDbType.VarChar, 31);
				}
			}
			
			public static SqlParameter Ruta_certificadoPac
			{
				get
				{
					return new SqlParameter("@Ruta_certificadoPac", SqlDbType.VarChar, 251);
				}
			}
			
			public static SqlParameter Ruta_clavePac
			{
				get
				{
					return new SqlParameter("@Ruta_clavePac", SqlDbType.VarChar, 251);
				}
			}
			
			public static SqlParameter Contrasenia_clavePac
			{
				get
				{
					return new SqlParameter("@Contrasenia_clavePac", SqlDbType.VarChar, 31);
				}
			}
			
			public static SqlParameter Rfc
			{
				get
				{
					return new SqlParameter("@Rfc", SqlDbType.VarChar, 8000);
				}
			}
			
			public static SqlParameter Regimen
			{
				get
				{
					return new SqlParameter("@Regimen", SqlDbType.NVarChar, 1073741823);
				}
			}
			
			public static SqlParameter RutaXml
			{
				get
				{
					return new SqlParameter("@RutaXml", SqlDbType.NVarChar, 1073741823);
				}
			}
			
			public static SqlParameter EstadoActual
			{
				get
				{
					return new SqlParameter("@EstadoActual", SqlDbType.VarChar, 20);
				}
			}
			
			public static SqlParameter MensajeEA
			{
				get
				{
					return new SqlParameter("@MensajeEA", SqlDbType.VarChar, 255);
				}
			}
			
			public static SqlParameter MetodoDePago
			{
				get
				{
					return new SqlParameter("@MetodoDePago", SqlDbType.VarChar, 21);
				}
			}
			
			public static SqlParameter Isocurrc
			{
				get
				{
					return new SqlParameter("@Isocurrc", SqlDbType.VarChar, 3);
				}
			}
			
		}
		#endregion	
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string EstadoContabilizado = "estadoContabilizado";
            public const string Soptype = "soptype";
            public const string Docid = "docid";
            public const string Sopnumbe = "sopnumbe";
            public const string Fechahora = "fechahora";
            public const string CUSTNMBR = "CUSTNMBR";
            public const string NombreCliente = "nombreCliente";
            public const string IdImpuestoCliente = "idImpuestoCliente";
            public const string Total = "total";
            public const string MontoActualOriginal = "montoActualOriginal";
            public const string Voidstts = "voidstts";
            public const string Estado = "estado";
            public const string Mensaje = "mensaje";
            public const string ComprobanteXml = "comprobanteXml";
            public const string SelloCFD = "selloCFD";
            public const string FechaTimbrado = "FechaTimbrado";
            public const string UUID = "UUID";
            public const string NoCertificadoSAT = "noCertificadoSAT";
            public const string Version = "version";
            public const string SelloSAT = "selloSAT";
            public const string FormaDePago = "formaDePago";
            public const string Sello = "sello";
            public const string NoCertificado = "noCertificado";
            public const string CadenaOriginalSAT = "cadenaOriginalSAT";
            public const string ID_Certificado = "ID_Certificado";
            public const string Ruta_certificado = "ruta_certificado";
            public const string Ruta_clave = "ruta_clave";
            public const string Contrasenia_clave = "contrasenia_clave";
            public const string Ruta_certificadoPac = "ruta_certificadoPac";
            public const string Ruta_clavePac = "ruta_clavePac";
            public const string Contrasenia_clavePac = "contrasenia_clavePac";
            public const string Rfc = "rfc";
            public const string Regimen = "regimen";
            public const string RutaXml = "rutaXml";
            public const string EstadoActual = "estadoActual";
            public const string MensajeEA = "mensajeEA";
            public const string MetodoDePago = "metodoDePago";
            public const string Isocurrc = "isocurrc";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[EstadoContabilizado] = vwCfdiTrxCobros.PropertyNames.EstadoContabilizado;
					ht[Soptype] = vwCfdiTrxCobros.PropertyNames.Soptype;
					ht[Docid] = vwCfdiTrxCobros.PropertyNames.Docid;
					ht[Sopnumbe] = vwCfdiTrxCobros.PropertyNames.Sopnumbe;
					ht[Fechahora] = vwCfdiTrxCobros.PropertyNames.Fechahora;
					ht[CUSTNMBR] = vwCfdiTrxCobros.PropertyNames.CUSTNMBR;
					ht[NombreCliente] = vwCfdiTrxCobros.PropertyNames.NombreCliente;
					ht[IdImpuestoCliente] = vwCfdiTrxCobros.PropertyNames.IdImpuestoCliente;
					ht[Total] = vwCfdiTrxCobros.PropertyNames.Total;
					ht[MontoActualOriginal] = vwCfdiTrxCobros.PropertyNames.MontoActualOriginal;
					ht[Voidstts] = vwCfdiTrxCobros.PropertyNames.Voidstts;
					ht[Estado] = vwCfdiTrxCobros.PropertyNames.Estado;
					ht[Mensaje] = vwCfdiTrxCobros.PropertyNames.Mensaje;
					ht[ComprobanteXml] = vwCfdiTrxCobros.PropertyNames.ComprobanteXml;
					ht[SelloCFD] = vwCfdiTrxCobros.PropertyNames.SelloCFD;
					ht[FechaTimbrado] = vwCfdiTrxCobros.PropertyNames.FechaTimbrado;
					ht[UUID] = vwCfdiTrxCobros.PropertyNames.UUID;
					ht[NoCertificadoSAT] = vwCfdiTrxCobros.PropertyNames.NoCertificadoSAT;
					ht[Version] = vwCfdiTrxCobros.PropertyNames.Version;
					ht[SelloSAT] = vwCfdiTrxCobros.PropertyNames.SelloSAT;
					ht[FormaDePago] = vwCfdiTrxCobros.PropertyNames.FormaDePago;
					ht[Sello] = vwCfdiTrxCobros.PropertyNames.Sello;
					ht[NoCertificado] = vwCfdiTrxCobros.PropertyNames.NoCertificado;
					ht[CadenaOriginalSAT] = vwCfdiTrxCobros.PropertyNames.CadenaOriginalSAT;
					ht[ID_Certificado] = vwCfdiTrxCobros.PropertyNames.ID_Certificado;
					ht[Ruta_certificado] = vwCfdiTrxCobros.PropertyNames.Ruta_certificado;
					ht[Ruta_clave] = vwCfdiTrxCobros.PropertyNames.Ruta_clave;
					ht[Contrasenia_clave] = vwCfdiTrxCobros.PropertyNames.Contrasenia_clave;
					ht[Ruta_certificadoPac] = vwCfdiTrxCobros.PropertyNames.Ruta_certificadoPac;
					ht[Ruta_clavePac] = vwCfdiTrxCobros.PropertyNames.Ruta_clavePac;
					ht[Contrasenia_clavePac] = vwCfdiTrxCobros.PropertyNames.Contrasenia_clavePac;
					ht[Rfc] = vwCfdiTrxCobros.PropertyNames.Rfc;
					ht[Regimen] = vwCfdiTrxCobros.PropertyNames.Regimen;
					ht[RutaXml] = vwCfdiTrxCobros.PropertyNames.RutaXml;
					ht[EstadoActual] = vwCfdiTrxCobros.PropertyNames.EstadoActual;
					ht[MensajeEA] = vwCfdiTrxCobros.PropertyNames.MensajeEA;
					ht[MetodoDePago] = vwCfdiTrxCobros.PropertyNames.MetodoDePago;
					ht[Isocurrc] = vwCfdiTrxCobros.PropertyNames.Isocurrc;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string EstadoContabilizado = "EstadoContabilizado";
            public const string Soptype = "Soptype";
            public const string Docid = "Docid";
            public const string Sopnumbe = "Sopnumbe";
            public const string Fechahora = "Fechahora";
            public const string CUSTNMBR = "CUSTNMBR";
            public const string NombreCliente = "NombreCliente";
            public const string IdImpuestoCliente = "IdImpuestoCliente";
            public const string Total = "Total";
            public const string MontoActualOriginal = "MontoActualOriginal";
            public const string Voidstts = "Voidstts";
            public const string Estado = "Estado";
            public const string Mensaje = "Mensaje";
            public const string ComprobanteXml = "ComprobanteXml";
            public const string SelloCFD = "SelloCFD";
            public const string FechaTimbrado = "FechaTimbrado";
            public const string UUID = "UUID";
            public const string NoCertificadoSAT = "NoCertificadoSAT";
            public const string Version = "Version";
            public const string SelloSAT = "SelloSAT";
            public const string FormaDePago = "FormaDePago";
            public const string Sello = "Sello";
            public const string NoCertificado = "NoCertificado";
            public const string CadenaOriginalSAT = "CadenaOriginalSAT";
            public const string ID_Certificado = "ID_Certificado";
            public const string Ruta_certificado = "Ruta_certificado";
            public const string Ruta_clave = "Ruta_clave";
            public const string Contrasenia_clave = "Contrasenia_clave";
            public const string Ruta_certificadoPac = "Ruta_certificadoPac";
            public const string Ruta_clavePac = "Ruta_clavePac";
            public const string Contrasenia_clavePac = "Contrasenia_clavePac";
            public const string Rfc = "Rfc";
            public const string Regimen = "Regimen";
            public const string RutaXml = "RutaXml";
            public const string EstadoActual = "EstadoActual";
            public const string MensajeEA = "MensajeEA";
            public const string MetodoDePago = "MetodoDePago";
            public const string Isocurrc = "Isocurrc";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[EstadoContabilizado] = vwCfdiTrxCobros.ColumnNames.EstadoContabilizado;
					ht[Soptype] = vwCfdiTrxCobros.ColumnNames.Soptype;
					ht[Docid] = vwCfdiTrxCobros.ColumnNames.Docid;
					ht[Sopnumbe] = vwCfdiTrxCobros.ColumnNames.Sopnumbe;
					ht[Fechahora] = vwCfdiTrxCobros.ColumnNames.Fechahora;
					ht[CUSTNMBR] = vwCfdiTrxCobros.ColumnNames.CUSTNMBR;
					ht[NombreCliente] = vwCfdiTrxCobros.ColumnNames.NombreCliente;
					ht[IdImpuestoCliente] = vwCfdiTrxCobros.ColumnNames.IdImpuestoCliente;
					ht[Total] = vwCfdiTrxCobros.ColumnNames.Total;
					ht[MontoActualOriginal] = vwCfdiTrxCobros.ColumnNames.MontoActualOriginal;
					ht[Voidstts] = vwCfdiTrxCobros.ColumnNames.Voidstts;
					ht[Estado] = vwCfdiTrxCobros.ColumnNames.Estado;
					ht[Mensaje] = vwCfdiTrxCobros.ColumnNames.Mensaje;
					ht[ComprobanteXml] = vwCfdiTrxCobros.ColumnNames.ComprobanteXml;
					ht[SelloCFD] = vwCfdiTrxCobros.ColumnNames.SelloCFD;
					ht[FechaTimbrado] = vwCfdiTrxCobros.ColumnNames.FechaTimbrado;
					ht[UUID] = vwCfdiTrxCobros.ColumnNames.UUID;
					ht[NoCertificadoSAT] = vwCfdiTrxCobros.ColumnNames.NoCertificadoSAT;
					ht[Version] = vwCfdiTrxCobros.ColumnNames.Version;
					ht[SelloSAT] = vwCfdiTrxCobros.ColumnNames.SelloSAT;
					ht[FormaDePago] = vwCfdiTrxCobros.ColumnNames.FormaDePago;
					ht[Sello] = vwCfdiTrxCobros.ColumnNames.Sello;
					ht[NoCertificado] = vwCfdiTrxCobros.ColumnNames.NoCertificado;
					ht[CadenaOriginalSAT] = vwCfdiTrxCobros.ColumnNames.CadenaOriginalSAT;
					ht[ID_Certificado] = vwCfdiTrxCobros.ColumnNames.ID_Certificado;
					ht[Ruta_certificado] = vwCfdiTrxCobros.ColumnNames.Ruta_certificado;
					ht[Ruta_clave] = vwCfdiTrxCobros.ColumnNames.Ruta_clave;
					ht[Contrasenia_clave] = vwCfdiTrxCobros.ColumnNames.Contrasenia_clave;
					ht[Ruta_certificadoPac] = vwCfdiTrxCobros.ColumnNames.Ruta_certificadoPac;
					ht[Ruta_clavePac] = vwCfdiTrxCobros.ColumnNames.Ruta_clavePac;
					ht[Contrasenia_clavePac] = vwCfdiTrxCobros.ColumnNames.Contrasenia_clavePac;
					ht[Rfc] = vwCfdiTrxCobros.ColumnNames.Rfc;
					ht[Regimen] = vwCfdiTrxCobros.ColumnNames.Regimen;
					ht[RutaXml] = vwCfdiTrxCobros.ColumnNames.RutaXml;
					ht[EstadoActual] = vwCfdiTrxCobros.ColumnNames.EstadoActual;
					ht[MensajeEA] = vwCfdiTrxCobros.ColumnNames.MensajeEA;
					ht[MetodoDePago] = vwCfdiTrxCobros.ColumnNames.MetodoDePago;
					ht[Isocurrc] = vwCfdiTrxCobros.ColumnNames.Isocurrc;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string EstadoContabilizado = "s_EstadoContabilizado";
            public const string Soptype = "s_Soptype";
            public const string Docid = "s_Docid";
            public const string Sopnumbe = "s_Sopnumbe";
            public const string Fechahora = "s_Fechahora";
            public const string CUSTNMBR = "s_CUSTNMBR";
            public const string NombreCliente = "s_NombreCliente";
            public const string IdImpuestoCliente = "s_IdImpuestoCliente";
            public const string Total = "s_Total";
            public const string MontoActualOriginal = "s_MontoActualOriginal";
            public const string Voidstts = "s_Voidstts";
            public const string Estado = "s_Estado";
            public const string Mensaje = "s_Mensaje";
            public const string ComprobanteXml = "s_ComprobanteXml";
            public const string SelloCFD = "s_SelloCFD";
            public const string FechaTimbrado = "s_FechaTimbrado";
            public const string UUID = "s_UUID";
            public const string NoCertificadoSAT = "s_NoCertificadoSAT";
            public const string Version = "s_Version";
            public const string SelloSAT = "s_SelloSAT";
            public const string FormaDePago = "s_FormaDePago";
            public const string Sello = "s_Sello";
            public const string NoCertificado = "s_NoCertificado";
            public const string CadenaOriginalSAT = "s_CadenaOriginalSAT";
            public const string ID_Certificado = "s_ID_Certificado";
            public const string Ruta_certificado = "s_Ruta_certificado";
            public const string Ruta_clave = "s_Ruta_clave";
            public const string Contrasenia_clave = "s_Contrasenia_clave";
            public const string Ruta_certificadoPac = "s_Ruta_certificadoPac";
            public const string Ruta_clavePac = "s_Ruta_clavePac";
            public const string Contrasenia_clavePac = "s_Contrasenia_clavePac";
            public const string Rfc = "s_Rfc";
            public const string Regimen = "s_Regimen";
            public const string RutaXml = "s_RutaXml";
            public const string EstadoActual = "s_EstadoActual";
            public const string MensajeEA = "s_MensajeEA";
            public const string MetodoDePago = "s_MetodoDePago";
            public const string Isocurrc = "s_Isocurrc";

		}
		#endregion	
		
		#region Properties
			public virtual string EstadoContabilizado
	    {
			get
	        {
				return base.Getstring(ColumnNames.EstadoContabilizado);
			}
			set
	        {
				base.Setstring(ColumnNames.EstadoContabilizado, value);
			}
		}

		public virtual short Soptype
	    {
			get
	        {
				return base.Getshort(ColumnNames.Soptype);
			}
			set
	        {
				base.Setshort(ColumnNames.Soptype, value);
			}
		}

		public virtual string Docid
	    {
			get
	        {
				return base.Getstring(ColumnNames.Docid);
			}
			set
	        {
				base.Setstring(ColumnNames.Docid, value);
			}
		}

		public virtual string Sopnumbe
	    {
			get
	        {
				return base.Getstring(ColumnNames.Sopnumbe);
			}
			set
	        {
				base.Setstring(ColumnNames.Sopnumbe, value);
			}
		}

		public virtual DateTime Fechahora
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.Fechahora);
			}
			set
	        {
				base.SetDateTime(ColumnNames.Fechahora, value);
			}
		}

		public virtual string CUSTNMBR
	    {
			get
	        {
				return base.Getstring(ColumnNames.CUSTNMBR);
			}
			set
	        {
				base.Setstring(ColumnNames.CUSTNMBR, value);
			}
		}

		public virtual string NombreCliente
	    {
			get
	        {
				return base.Getstring(ColumnNames.NombreCliente);
			}
			set
	        {
				base.Setstring(ColumnNames.NombreCliente, value);
			}
		}

		public virtual string IdImpuestoCliente
	    {
			get
	        {
				return base.Getstring(ColumnNames.IdImpuestoCliente);
			}
			set
	        {
				base.Setstring(ColumnNames.IdImpuestoCliente, value);
			}
		}

		public virtual decimal Total
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.Total);
			}
			set
	        {
				base.Setdecimal(ColumnNames.Total, value);
			}
		}

		public virtual decimal MontoActualOriginal
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.MontoActualOriginal);
			}
			set
	        {
				base.Setdecimal(ColumnNames.MontoActualOriginal, value);
			}
		}

		public virtual short Voidstts
	    {
			get
	        {
				return base.Getshort(ColumnNames.Voidstts);
			}
			set
	        {
				base.Setshort(ColumnNames.Voidstts, value);
			}
		}

		public virtual string Estado
	    {
			get
	        {
				return base.Getstring(ColumnNames.Estado);
			}
			set
	        {
				base.Setstring(ColumnNames.Estado, value);
			}
		}

		public virtual string Mensaje
	    {
			get
	        {
				return base.Getstring(ColumnNames.Mensaje);
			}
			set
	        {
				base.Setstring(ColumnNames.Mensaje, value);
			}
		}

		public virtual string ComprobanteXml
	    {
			get
	        {
				return base.Getstring(ColumnNames.ComprobanteXml);
			}
			set
	        {
				base.Setstring(ColumnNames.ComprobanteXml, value);
			}
		}

		public virtual string SelloCFD
	    {
			get
	        {
				return base.Getstring(ColumnNames.SelloCFD);
			}
			set
	        {
				base.Setstring(ColumnNames.SelloCFD, value);
			}
		}

		public virtual string FechaTimbrado
	    {
			get
	        {
				return base.Getstring(ColumnNames.FechaTimbrado);
			}
			set
	        {
				base.Setstring(ColumnNames.FechaTimbrado, value);
			}
		}

		public virtual string UUID
	    {
			get
	        {
				return base.Getstring(ColumnNames.UUID);
			}
			set
	        {
				base.Setstring(ColumnNames.UUID, value);
			}
		}

		public virtual string NoCertificadoSAT
	    {
			get
	        {
				return base.Getstring(ColumnNames.NoCertificadoSAT);
			}
			set
	        {
				base.Setstring(ColumnNames.NoCertificadoSAT, value);
			}
		}

		public virtual string Version
	    {
			get
	        {
				return base.Getstring(ColumnNames.Version);
			}
			set
	        {
				base.Setstring(ColumnNames.Version, value);
			}
		}

		public virtual string SelloSAT
	    {
			get
	        {
				return base.Getstring(ColumnNames.SelloSAT);
			}
			set
	        {
				base.Setstring(ColumnNames.SelloSAT, value);
			}
		}

		public virtual string FormaDePago
	    {
			get
	        {
				return base.Getstring(ColumnNames.FormaDePago);
			}
			set
	        {
				base.Setstring(ColumnNames.FormaDePago, value);
			}
		}

		public virtual string Sello
	    {
			get
	        {
				return base.Getstring(ColumnNames.Sello);
			}
			set
	        {
				base.Setstring(ColumnNames.Sello, value);
			}
		}

		public virtual string NoCertificado
	    {
			get
	        {
				return base.Getstring(ColumnNames.NoCertificado);
			}
			set
	        {
				base.Setstring(ColumnNames.NoCertificado, value);
			}
		}

		public virtual string CadenaOriginalSAT
	    {
			get
	        {
				return base.Getstring(ColumnNames.CadenaOriginalSAT);
			}
			set
	        {
				base.Setstring(ColumnNames.CadenaOriginalSAT, value);
			}
		}

		public virtual string ID_Certificado
	    {
			get
	        {
				return base.Getstring(ColumnNames.ID_Certificado);
			}
			set
	        {
				base.Setstring(ColumnNames.ID_Certificado, value);
			}
		}

		public virtual string Ruta_certificado
	    {
			get
	        {
				return base.Getstring(ColumnNames.Ruta_certificado);
			}
			set
	        {
				base.Setstring(ColumnNames.Ruta_certificado, value);
			}
		}

		public virtual string Ruta_clave
	    {
			get
	        {
				return base.Getstring(ColumnNames.Ruta_clave);
			}
			set
	        {
				base.Setstring(ColumnNames.Ruta_clave, value);
			}
		}

		public virtual string Contrasenia_clave
	    {
			get
	        {
				return base.Getstring(ColumnNames.Contrasenia_clave);
			}
			set
	        {
				base.Setstring(ColumnNames.Contrasenia_clave, value);
			}
		}

		public virtual string Ruta_certificadoPac
	    {
			get
	        {
				return base.Getstring(ColumnNames.Ruta_certificadoPac);
			}
			set
	        {
				base.Setstring(ColumnNames.Ruta_certificadoPac, value);
			}
		}

		public virtual string Ruta_clavePac
	    {
			get
	        {
				return base.Getstring(ColumnNames.Ruta_clavePac);
			}
			set
	        {
				base.Setstring(ColumnNames.Ruta_clavePac, value);
			}
		}

		public virtual string Contrasenia_clavePac
	    {
			get
	        {
				return base.Getstring(ColumnNames.Contrasenia_clavePac);
			}
			set
	        {
				base.Setstring(ColumnNames.Contrasenia_clavePac, value);
			}
		}

		public virtual string Rfc
	    {
			get
	        {
				return base.Getstring(ColumnNames.Rfc);
			}
			set
	        {
				base.Setstring(ColumnNames.Rfc, value);
			}
		}

		public virtual string Regimen
	    {
			get
	        {
				return base.Getstring(ColumnNames.Regimen);
			}
			set
	        {
				base.Setstring(ColumnNames.Regimen, value);
			}
		}

		public virtual string RutaXml
	    {
			get
	        {
				return base.Getstring(ColumnNames.RutaXml);
			}
			set
	        {
				base.Setstring(ColumnNames.RutaXml, value);
			}
		}

		public virtual string EstadoActual
	    {
			get
	        {
				return base.Getstring(ColumnNames.EstadoActual);
			}
			set
	        {
				base.Setstring(ColumnNames.EstadoActual, value);
			}
		}

		public virtual string MensajeEA
	    {
			get
	        {
				return base.Getstring(ColumnNames.MensajeEA);
			}
			set
	        {
				base.Setstring(ColumnNames.MensajeEA, value);
			}
		}

		public virtual string MetodoDePago
	    {
			get
	        {
				return base.Getstring(ColumnNames.MetodoDePago);
			}
			set
	        {
				base.Setstring(ColumnNames.MetodoDePago, value);
			}
		}

		public virtual string Isocurrc
	    {
			get
	        {
				return base.Getstring(ColumnNames.Isocurrc);
			}
			set
	        {
				base.Setstring(ColumnNames.Isocurrc, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_EstadoContabilizado
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.EstadoContabilizado) ? string.Empty : base.GetstringAsString(ColumnNames.EstadoContabilizado);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.EstadoContabilizado);
				else
					this.EstadoContabilizado = base.SetstringAsString(ColumnNames.EstadoContabilizado, value);
			}
		}

		public virtual string s_Soptype
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Soptype) ? string.Empty : base.GetshortAsString(ColumnNames.Soptype);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Soptype);
				else
					this.Soptype = base.SetshortAsString(ColumnNames.Soptype, value);
			}
		}

		public virtual string s_Docid
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Docid) ? string.Empty : base.GetstringAsString(ColumnNames.Docid);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Docid);
				else
					this.Docid = base.SetstringAsString(ColumnNames.Docid, value);
			}
		}

		public virtual string s_Sopnumbe
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Sopnumbe) ? string.Empty : base.GetstringAsString(ColumnNames.Sopnumbe);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Sopnumbe);
				else
					this.Sopnumbe = base.SetstringAsString(ColumnNames.Sopnumbe, value);
			}
		}

		public virtual string s_Fechahora
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Fechahora) ? string.Empty : base.GetDateTimeAsString(ColumnNames.Fechahora);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Fechahora);
				else
					this.Fechahora = base.SetDateTimeAsString(ColumnNames.Fechahora, value);
			}
		}

		public virtual string s_CUSTNMBR
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CUSTNMBR) ? string.Empty : base.GetstringAsString(ColumnNames.CUSTNMBR);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CUSTNMBR);
				else
					this.CUSTNMBR = base.SetstringAsString(ColumnNames.CUSTNMBR, value);
			}
		}

		public virtual string s_NombreCliente
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.NombreCliente) ? string.Empty : base.GetstringAsString(ColumnNames.NombreCliente);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.NombreCliente);
				else
					this.NombreCliente = base.SetstringAsString(ColumnNames.NombreCliente, value);
			}
		}

		public virtual string s_IdImpuestoCliente
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IdImpuestoCliente) ? string.Empty : base.GetstringAsString(ColumnNames.IdImpuestoCliente);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IdImpuestoCliente);
				else
					this.IdImpuestoCliente = base.SetstringAsString(ColumnNames.IdImpuestoCliente, value);
			}
		}

		public virtual string s_Total
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Total) ? string.Empty : base.GetdecimalAsString(ColumnNames.Total);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Total);
				else
					this.Total = base.SetdecimalAsString(ColumnNames.Total, value);
			}
		}

		public virtual string s_MontoActualOriginal
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.MontoActualOriginal) ? string.Empty : base.GetdecimalAsString(ColumnNames.MontoActualOriginal);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.MontoActualOriginal);
				else
					this.MontoActualOriginal = base.SetdecimalAsString(ColumnNames.MontoActualOriginal, value);
			}
		}

		public virtual string s_Voidstts
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Voidstts) ? string.Empty : base.GetshortAsString(ColumnNames.Voidstts);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Voidstts);
				else
					this.Voidstts = base.SetshortAsString(ColumnNames.Voidstts, value);
			}
		}

		public virtual string s_Estado
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Estado) ? string.Empty : base.GetstringAsString(ColumnNames.Estado);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Estado);
				else
					this.Estado = base.SetstringAsString(ColumnNames.Estado, value);
			}
		}

		public virtual string s_Mensaje
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Mensaje) ? string.Empty : base.GetstringAsString(ColumnNames.Mensaje);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Mensaje);
				else
					this.Mensaje = base.SetstringAsString(ColumnNames.Mensaje, value);
			}
		}

		public virtual string s_ComprobanteXml
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ComprobanteXml) ? string.Empty : base.GetstringAsString(ColumnNames.ComprobanteXml);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ComprobanteXml);
				else
					this.ComprobanteXml = base.SetstringAsString(ColumnNames.ComprobanteXml, value);
			}
		}

		public virtual string s_SelloCFD
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.SelloCFD) ? string.Empty : base.GetstringAsString(ColumnNames.SelloCFD);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.SelloCFD);
				else
					this.SelloCFD = base.SetstringAsString(ColumnNames.SelloCFD, value);
			}
		}

		public virtual string s_FechaTimbrado
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FechaTimbrado) ? string.Empty : base.GetstringAsString(ColumnNames.FechaTimbrado);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FechaTimbrado);
				else
					this.FechaTimbrado = base.SetstringAsString(ColumnNames.FechaTimbrado, value);
			}
		}

		public virtual string s_UUID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.UUID) ? string.Empty : base.GetstringAsString(ColumnNames.UUID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.UUID);
				else
					this.UUID = base.SetstringAsString(ColumnNames.UUID, value);
			}
		}

		public virtual string s_NoCertificadoSAT
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.NoCertificadoSAT) ? string.Empty : base.GetstringAsString(ColumnNames.NoCertificadoSAT);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.NoCertificadoSAT);
				else
					this.NoCertificadoSAT = base.SetstringAsString(ColumnNames.NoCertificadoSAT, value);
			}
		}

		public virtual string s_Version
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Version) ? string.Empty : base.GetstringAsString(ColumnNames.Version);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Version);
				else
					this.Version = base.SetstringAsString(ColumnNames.Version, value);
			}
		}

		public virtual string s_SelloSAT
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.SelloSAT) ? string.Empty : base.GetstringAsString(ColumnNames.SelloSAT);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.SelloSAT);
				else
					this.SelloSAT = base.SetstringAsString(ColumnNames.SelloSAT, value);
			}
		}

		public virtual string s_FormaDePago
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FormaDePago) ? string.Empty : base.GetstringAsString(ColumnNames.FormaDePago);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FormaDePago);
				else
					this.FormaDePago = base.SetstringAsString(ColumnNames.FormaDePago, value);
			}
		}

		public virtual string s_Sello
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Sello) ? string.Empty : base.GetstringAsString(ColumnNames.Sello);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Sello);
				else
					this.Sello = base.SetstringAsString(ColumnNames.Sello, value);
			}
		}

		public virtual string s_NoCertificado
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.NoCertificado) ? string.Empty : base.GetstringAsString(ColumnNames.NoCertificado);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.NoCertificado);
				else
					this.NoCertificado = base.SetstringAsString(ColumnNames.NoCertificado, value);
			}
		}

		public virtual string s_CadenaOriginalSAT
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CadenaOriginalSAT) ? string.Empty : base.GetstringAsString(ColumnNames.CadenaOriginalSAT);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CadenaOriginalSAT);
				else
					this.CadenaOriginalSAT = base.SetstringAsString(ColumnNames.CadenaOriginalSAT, value);
			}
		}

		public virtual string s_ID_Certificado
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ID_Certificado) ? string.Empty : base.GetstringAsString(ColumnNames.ID_Certificado);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ID_Certificado);
				else
					this.ID_Certificado = base.SetstringAsString(ColumnNames.ID_Certificado, value);
			}
		}

		public virtual string s_Ruta_certificado
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Ruta_certificado) ? string.Empty : base.GetstringAsString(ColumnNames.Ruta_certificado);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Ruta_certificado);
				else
					this.Ruta_certificado = base.SetstringAsString(ColumnNames.Ruta_certificado, value);
			}
		}

		public virtual string s_Ruta_clave
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Ruta_clave) ? string.Empty : base.GetstringAsString(ColumnNames.Ruta_clave);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Ruta_clave);
				else
					this.Ruta_clave = base.SetstringAsString(ColumnNames.Ruta_clave, value);
			}
		}

		public virtual string s_Contrasenia_clave
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Contrasenia_clave) ? string.Empty : base.GetstringAsString(ColumnNames.Contrasenia_clave);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Contrasenia_clave);
				else
					this.Contrasenia_clave = base.SetstringAsString(ColumnNames.Contrasenia_clave, value);
			}
		}

		public virtual string s_Ruta_certificadoPac
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Ruta_certificadoPac) ? string.Empty : base.GetstringAsString(ColumnNames.Ruta_certificadoPac);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Ruta_certificadoPac);
				else
					this.Ruta_certificadoPac = base.SetstringAsString(ColumnNames.Ruta_certificadoPac, value);
			}
		}

		public virtual string s_Ruta_clavePac
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Ruta_clavePac) ? string.Empty : base.GetstringAsString(ColumnNames.Ruta_clavePac);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Ruta_clavePac);
				else
					this.Ruta_clavePac = base.SetstringAsString(ColumnNames.Ruta_clavePac, value);
			}
		}

		public virtual string s_Contrasenia_clavePac
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Contrasenia_clavePac) ? string.Empty : base.GetstringAsString(ColumnNames.Contrasenia_clavePac);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Contrasenia_clavePac);
				else
					this.Contrasenia_clavePac = base.SetstringAsString(ColumnNames.Contrasenia_clavePac, value);
			}
		}

		public virtual string s_Rfc
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Rfc) ? string.Empty : base.GetstringAsString(ColumnNames.Rfc);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Rfc);
				else
					this.Rfc = base.SetstringAsString(ColumnNames.Rfc, value);
			}
		}

		public virtual string s_Regimen
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Regimen) ? string.Empty : base.GetstringAsString(ColumnNames.Regimen);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Regimen);
				else
					this.Regimen = base.SetstringAsString(ColumnNames.Regimen, value);
			}
		}

		public virtual string s_RutaXml
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.RutaXml) ? string.Empty : base.GetstringAsString(ColumnNames.RutaXml);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.RutaXml);
				else
					this.RutaXml = base.SetstringAsString(ColumnNames.RutaXml, value);
			}
		}

		public virtual string s_EstadoActual
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.EstadoActual) ? string.Empty : base.GetstringAsString(ColumnNames.EstadoActual);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.EstadoActual);
				else
					this.EstadoActual = base.SetstringAsString(ColumnNames.EstadoActual, value);
			}
		}

		public virtual string s_MensajeEA
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.MensajeEA) ? string.Empty : base.GetstringAsString(ColumnNames.MensajeEA);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.MensajeEA);
				else
					this.MensajeEA = base.SetstringAsString(ColumnNames.MensajeEA, value);
			}
		}

		public virtual string s_MetodoDePago
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.MetodoDePago) ? string.Empty : base.GetstringAsString(ColumnNames.MetodoDePago);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.MetodoDePago);
				else
					this.MetodoDePago = base.SetstringAsString(ColumnNames.MetodoDePago, value);
			}
		}

		public virtual string s_Isocurrc
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Isocurrc) ? string.Empty : base.GetstringAsString(ColumnNames.Isocurrc);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Isocurrc);
				else
					this.Isocurrc = base.SetstringAsString(ColumnNames.Isocurrc, value);
			}
		}


		#endregion			
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter EstadoContabilizado
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.EstadoContabilizado, Parameters.EstadoContabilizado);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Soptype
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Soptype, Parameters.Soptype);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Docid
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Docid, Parameters.Docid);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Sopnumbe
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Sopnumbe, Parameters.Sopnumbe);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Fechahora
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Fechahora, Parameters.Fechahora);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CUSTNMBR
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CUSTNMBR, Parameters.CUSTNMBR);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter NombreCliente
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.NombreCliente, Parameters.NombreCliente);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IdImpuestoCliente
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IdImpuestoCliente, Parameters.IdImpuestoCliente);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Total
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Total, Parameters.Total);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter MontoActualOriginal
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.MontoActualOriginal, Parameters.MontoActualOriginal);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Voidstts
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Voidstts, Parameters.Voidstts);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Estado
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Estado, Parameters.Estado);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Mensaje
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Mensaje, Parameters.Mensaje);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ComprobanteXml
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ComprobanteXml, Parameters.ComprobanteXml);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter SelloCFD
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.SelloCFD, Parameters.SelloCFD);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FechaTimbrado
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FechaTimbrado, Parameters.FechaTimbrado);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter UUID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.UUID, Parameters.UUID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter NoCertificadoSAT
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.NoCertificadoSAT, Parameters.NoCertificadoSAT);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Version
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Version, Parameters.Version);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter SelloSAT
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.SelloSAT, Parameters.SelloSAT);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FormaDePago
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FormaDePago, Parameters.FormaDePago);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Sello
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Sello, Parameters.Sello);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter NoCertificado
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.NoCertificado, Parameters.NoCertificado);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CadenaOriginalSAT
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CadenaOriginalSAT, Parameters.CadenaOriginalSAT);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ID_Certificado
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ID_Certificado, Parameters.ID_Certificado);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Ruta_certificado
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Ruta_certificado, Parameters.Ruta_certificado);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Ruta_clave
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Ruta_clave, Parameters.Ruta_clave);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Contrasenia_clave
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Contrasenia_clave, Parameters.Contrasenia_clave);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Ruta_certificadoPac
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Ruta_certificadoPac, Parameters.Ruta_certificadoPac);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Ruta_clavePac
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Ruta_clavePac, Parameters.Ruta_clavePac);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Contrasenia_clavePac
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Contrasenia_clavePac, Parameters.Contrasenia_clavePac);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Rfc
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Rfc, Parameters.Rfc);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Regimen
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Regimen, Parameters.Regimen);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter RutaXml
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.RutaXml, Parameters.RutaXml);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter EstadoActual
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.EstadoActual, Parameters.EstadoActual);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter MensajeEA
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.MensajeEA, Parameters.MensajeEA);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter MetodoDePago
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.MetodoDePago, Parameters.MetodoDePago);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Isocurrc
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Isocurrc, Parameters.Isocurrc);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter EstadoContabilizado
		    {
				get
		        {
					if(_EstadoContabilizado_W == null)
	        	    {
						_EstadoContabilizado_W = TearOff.EstadoContabilizado;
					}
					return _EstadoContabilizado_W;
				}
			}

			public WhereParameter Soptype
		    {
				get
		        {
					if(_Soptype_W == null)
	        	    {
						_Soptype_W = TearOff.Soptype;
					}
					return _Soptype_W;
				}
			}

			public WhereParameter Docid
		    {
				get
		        {
					if(_Docid_W == null)
	        	    {
						_Docid_W = TearOff.Docid;
					}
					return _Docid_W;
				}
			}

			public WhereParameter Sopnumbe
		    {
				get
		        {
					if(_Sopnumbe_W == null)
	        	    {
						_Sopnumbe_W = TearOff.Sopnumbe;
					}
					return _Sopnumbe_W;
				}
			}

			public WhereParameter Fechahora
		    {
				get
		        {
					if(_Fechahora_W == null)
	        	    {
						_Fechahora_W = TearOff.Fechahora;
					}
					return _Fechahora_W;
				}
			}

			public WhereParameter CUSTNMBR
		    {
				get
		        {
					if(_CUSTNMBR_W == null)
	        	    {
						_CUSTNMBR_W = TearOff.CUSTNMBR;
					}
					return _CUSTNMBR_W;
				}
			}

			public WhereParameter NombreCliente
		    {
				get
		        {
					if(_NombreCliente_W == null)
	        	    {
						_NombreCliente_W = TearOff.NombreCliente;
					}
					return _NombreCliente_W;
				}
			}

			public WhereParameter IdImpuestoCliente
		    {
				get
		        {
					if(_IdImpuestoCliente_W == null)
	        	    {
						_IdImpuestoCliente_W = TearOff.IdImpuestoCliente;
					}
					return _IdImpuestoCliente_W;
				}
			}

			public WhereParameter Total
		    {
				get
		        {
					if(_Total_W == null)
	        	    {
						_Total_W = TearOff.Total;
					}
					return _Total_W;
				}
			}

			public WhereParameter MontoActualOriginal
		    {
				get
		        {
					if(_MontoActualOriginal_W == null)
	        	    {
						_MontoActualOriginal_W = TearOff.MontoActualOriginal;
					}
					return _MontoActualOriginal_W;
				}
			}

			public WhereParameter Voidstts
		    {
				get
		        {
					if(_Voidstts_W == null)
	        	    {
						_Voidstts_W = TearOff.Voidstts;
					}
					return _Voidstts_W;
				}
			}

			public WhereParameter Estado
		    {
				get
		        {
					if(_Estado_W == null)
	        	    {
						_Estado_W = TearOff.Estado;
					}
					return _Estado_W;
				}
			}

			public WhereParameter Mensaje
		    {
				get
		        {
					if(_Mensaje_W == null)
	        	    {
						_Mensaje_W = TearOff.Mensaje;
					}
					return _Mensaje_W;
				}
			}

			public WhereParameter ComprobanteXml
		    {
				get
		        {
					if(_ComprobanteXml_W == null)
	        	    {
						_ComprobanteXml_W = TearOff.ComprobanteXml;
					}
					return _ComprobanteXml_W;
				}
			}

			public WhereParameter SelloCFD
		    {
				get
		        {
					if(_SelloCFD_W == null)
	        	    {
						_SelloCFD_W = TearOff.SelloCFD;
					}
					return _SelloCFD_W;
				}
			}

			public WhereParameter FechaTimbrado
		    {
				get
		        {
					if(_FechaTimbrado_W == null)
	        	    {
						_FechaTimbrado_W = TearOff.FechaTimbrado;
					}
					return _FechaTimbrado_W;
				}
			}

			public WhereParameter UUID
		    {
				get
		        {
					if(_UUID_W == null)
	        	    {
						_UUID_W = TearOff.UUID;
					}
					return _UUID_W;
				}
			}

			public WhereParameter NoCertificadoSAT
		    {
				get
		        {
					if(_NoCertificadoSAT_W == null)
	        	    {
						_NoCertificadoSAT_W = TearOff.NoCertificadoSAT;
					}
					return _NoCertificadoSAT_W;
				}
			}

			public WhereParameter Version
		    {
				get
		        {
					if(_Version_W == null)
	        	    {
						_Version_W = TearOff.Version;
					}
					return _Version_W;
				}
			}

			public WhereParameter SelloSAT
		    {
				get
		        {
					if(_SelloSAT_W == null)
	        	    {
						_SelloSAT_W = TearOff.SelloSAT;
					}
					return _SelloSAT_W;
				}
			}

			public WhereParameter FormaDePago
		    {
				get
		        {
					if(_FormaDePago_W == null)
	        	    {
						_FormaDePago_W = TearOff.FormaDePago;
					}
					return _FormaDePago_W;
				}
			}

			public WhereParameter Sello
		    {
				get
		        {
					if(_Sello_W == null)
	        	    {
						_Sello_W = TearOff.Sello;
					}
					return _Sello_W;
				}
			}

			public WhereParameter NoCertificado
		    {
				get
		        {
					if(_NoCertificado_W == null)
	        	    {
						_NoCertificado_W = TearOff.NoCertificado;
					}
					return _NoCertificado_W;
				}
			}

			public WhereParameter CadenaOriginalSAT
		    {
				get
		        {
					if(_CadenaOriginalSAT_W == null)
	        	    {
						_CadenaOriginalSAT_W = TearOff.CadenaOriginalSAT;
					}
					return _CadenaOriginalSAT_W;
				}
			}

			public WhereParameter ID_Certificado
		    {
				get
		        {
					if(_ID_Certificado_W == null)
	        	    {
						_ID_Certificado_W = TearOff.ID_Certificado;
					}
					return _ID_Certificado_W;
				}
			}

			public WhereParameter Ruta_certificado
		    {
				get
		        {
					if(_Ruta_certificado_W == null)
	        	    {
						_Ruta_certificado_W = TearOff.Ruta_certificado;
					}
					return _Ruta_certificado_W;
				}
			}

			public WhereParameter Ruta_clave
		    {
				get
		        {
					if(_Ruta_clave_W == null)
	        	    {
						_Ruta_clave_W = TearOff.Ruta_clave;
					}
					return _Ruta_clave_W;
				}
			}

			public WhereParameter Contrasenia_clave
		    {
				get
		        {
					if(_Contrasenia_clave_W == null)
	        	    {
						_Contrasenia_clave_W = TearOff.Contrasenia_clave;
					}
					return _Contrasenia_clave_W;
				}
			}

			public WhereParameter Ruta_certificadoPac
		    {
				get
		        {
					if(_Ruta_certificadoPac_W == null)
	        	    {
						_Ruta_certificadoPac_W = TearOff.Ruta_certificadoPac;
					}
					return _Ruta_certificadoPac_W;
				}
			}

			public WhereParameter Ruta_clavePac
		    {
				get
		        {
					if(_Ruta_clavePac_W == null)
	        	    {
						_Ruta_clavePac_W = TearOff.Ruta_clavePac;
					}
					return _Ruta_clavePac_W;
				}
			}

			public WhereParameter Contrasenia_clavePac
		    {
				get
		        {
					if(_Contrasenia_clavePac_W == null)
	        	    {
						_Contrasenia_clavePac_W = TearOff.Contrasenia_clavePac;
					}
					return _Contrasenia_clavePac_W;
				}
			}

			public WhereParameter Rfc
		    {
				get
		        {
					if(_Rfc_W == null)
	        	    {
						_Rfc_W = TearOff.Rfc;
					}
					return _Rfc_W;
				}
			}

			public WhereParameter Regimen
		    {
				get
		        {
					if(_Regimen_W == null)
	        	    {
						_Regimen_W = TearOff.Regimen;
					}
					return _Regimen_W;
				}
			}

			public WhereParameter RutaXml
		    {
				get
		        {
					if(_RutaXml_W == null)
	        	    {
						_RutaXml_W = TearOff.RutaXml;
					}
					return _RutaXml_W;
				}
			}

			public WhereParameter EstadoActual
		    {
				get
		        {
					if(_EstadoActual_W == null)
	        	    {
						_EstadoActual_W = TearOff.EstadoActual;
					}
					return _EstadoActual_W;
				}
			}

			public WhereParameter MensajeEA
		    {
				get
		        {
					if(_MensajeEA_W == null)
	        	    {
						_MensajeEA_W = TearOff.MensajeEA;
					}
					return _MensajeEA_W;
				}
			}

			public WhereParameter MetodoDePago
		    {
				get
		        {
					if(_MetodoDePago_W == null)
	        	    {
						_MetodoDePago_W = TearOff.MetodoDePago;
					}
					return _MetodoDePago_W;
				}
			}

			public WhereParameter Isocurrc
		    {
				get
		        {
					if(_Isocurrc_W == null)
	        	    {
						_Isocurrc_W = TearOff.Isocurrc;
					}
					return _Isocurrc_W;
				}
			}

			private WhereParameter _EstadoContabilizado_W = null;
			private WhereParameter _Soptype_W = null;
			private WhereParameter _Docid_W = null;
			private WhereParameter _Sopnumbe_W = null;
			private WhereParameter _Fechahora_W = null;
			private WhereParameter _CUSTNMBR_W = null;
			private WhereParameter _NombreCliente_W = null;
			private WhereParameter _IdImpuestoCliente_W = null;
			private WhereParameter _Total_W = null;
			private WhereParameter _MontoActualOriginal_W = null;
			private WhereParameter _Voidstts_W = null;
			private WhereParameter _Estado_W = null;
			private WhereParameter _Mensaje_W = null;
			private WhereParameter _ComprobanteXml_W = null;
			private WhereParameter _SelloCFD_W = null;
			private WhereParameter _FechaTimbrado_W = null;
			private WhereParameter _UUID_W = null;
			private WhereParameter _NoCertificadoSAT_W = null;
			private WhereParameter _Version_W = null;
			private WhereParameter _SelloSAT_W = null;
			private WhereParameter _FormaDePago_W = null;
			private WhereParameter _Sello_W = null;
			private WhereParameter _NoCertificado_W = null;
			private WhereParameter _CadenaOriginalSAT_W = null;
			private WhereParameter _ID_Certificado_W = null;
			private WhereParameter _Ruta_certificado_W = null;
			private WhereParameter _Ruta_clave_W = null;
			private WhereParameter _Contrasenia_clave_W = null;
			private WhereParameter _Ruta_certificadoPac_W = null;
			private WhereParameter _Ruta_clavePac_W = null;
			private WhereParameter _Contrasenia_clavePac_W = null;
			private WhereParameter _Rfc_W = null;
			private WhereParameter _Regimen_W = null;
			private WhereParameter _RutaXml_W = null;
			private WhereParameter _EstadoActual_W = null;
			private WhereParameter _MensajeEA_W = null;
			private WhereParameter _MetodoDePago_W = null;
			private WhereParameter _Isocurrc_W = null;

			public void WhereClauseReset()
			{
				_EstadoContabilizado_W = null;
				_Soptype_W = null;
				_Docid_W = null;
				_Sopnumbe_W = null;
				_Fechahora_W = null;
				_CUSTNMBR_W = null;
				_NombreCliente_W = null;
				_IdImpuestoCliente_W = null;
				_Total_W = null;
				_MontoActualOriginal_W = null;
				_Voidstts_W = null;
				_Estado_W = null;
				_Mensaje_W = null;
				_ComprobanteXml_W = null;
				_SelloCFD_W = null;
				_FechaTimbrado_W = null;
				_UUID_W = null;
				_NoCertificadoSAT_W = null;
				_Version_W = null;
				_SelloSAT_W = null;
				_FormaDePago_W = null;
				_Sello_W = null;
				_NoCertificado_W = null;
				_CadenaOriginalSAT_W = null;
				_ID_Certificado_W = null;
				_Ruta_certificado_W = null;
				_Ruta_clave_W = null;
				_Contrasenia_clave_W = null;
				_Ruta_certificadoPac_W = null;
				_Ruta_clavePac_W = null;
				_Contrasenia_clavePac_W = null;
				_Rfc_W = null;
				_Regimen_W = null;
				_RutaXml_W = null;
				_EstadoActual_W = null;
				_MensajeEA_W = null;
				_MetodoDePago_W = null;
				_Isocurrc_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter EstadoContabilizado
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.EstadoContabilizado, Parameters.EstadoContabilizado);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Soptype
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Soptype, Parameters.Soptype);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Docid
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Docid, Parameters.Docid);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Sopnumbe
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Sopnumbe, Parameters.Sopnumbe);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Fechahora
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Fechahora, Parameters.Fechahora);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CUSTNMBR
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CUSTNMBR, Parameters.CUSTNMBR);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter NombreCliente
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.NombreCliente, Parameters.NombreCliente);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IdImpuestoCliente
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IdImpuestoCliente, Parameters.IdImpuestoCliente);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Total
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Total, Parameters.Total);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter MontoActualOriginal
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.MontoActualOriginal, Parameters.MontoActualOriginal);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Voidstts
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Voidstts, Parameters.Voidstts);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Estado
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Estado, Parameters.Estado);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Mensaje
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Mensaje, Parameters.Mensaje);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ComprobanteXml
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ComprobanteXml, Parameters.ComprobanteXml);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter SelloCFD
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.SelloCFD, Parameters.SelloCFD);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FechaTimbrado
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FechaTimbrado, Parameters.FechaTimbrado);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter UUID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.UUID, Parameters.UUID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter NoCertificadoSAT
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.NoCertificadoSAT, Parameters.NoCertificadoSAT);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Version
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Version, Parameters.Version);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter SelloSAT
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.SelloSAT, Parameters.SelloSAT);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FormaDePago
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FormaDePago, Parameters.FormaDePago);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Sello
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Sello, Parameters.Sello);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter NoCertificado
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.NoCertificado, Parameters.NoCertificado);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CadenaOriginalSAT
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CadenaOriginalSAT, Parameters.CadenaOriginalSAT);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ID_Certificado
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ID_Certificado, Parameters.ID_Certificado);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Ruta_certificado
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Ruta_certificado, Parameters.Ruta_certificado);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Ruta_clave
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Ruta_clave, Parameters.Ruta_clave);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Contrasenia_clave
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Contrasenia_clave, Parameters.Contrasenia_clave);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Ruta_certificadoPac
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Ruta_certificadoPac, Parameters.Ruta_certificadoPac);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Ruta_clavePac
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Ruta_clavePac, Parameters.Ruta_clavePac);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Contrasenia_clavePac
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Contrasenia_clavePac, Parameters.Contrasenia_clavePac);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Rfc
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Rfc, Parameters.Rfc);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Regimen
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Regimen, Parameters.Regimen);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter RutaXml
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.RutaXml, Parameters.RutaXml);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter EstadoActual
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.EstadoActual, Parameters.EstadoActual);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter MensajeEA
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.MensajeEA, Parameters.MensajeEA);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter MetodoDePago
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.MetodoDePago, Parameters.MetodoDePago);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Isocurrc
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Isocurrc, Parameters.Isocurrc);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter EstadoContabilizado
		    {
				get
		        {
					if(_EstadoContabilizado_W == null)
	        	    {
						_EstadoContabilizado_W = TearOff.EstadoContabilizado;
					}
					return _EstadoContabilizado_W;
				}
			}

			public AggregateParameter Soptype
		    {
				get
		        {
					if(_Soptype_W == null)
	        	    {
						_Soptype_W = TearOff.Soptype;
					}
					return _Soptype_W;
				}
			}

			public AggregateParameter Docid
		    {
				get
		        {
					if(_Docid_W == null)
	        	    {
						_Docid_W = TearOff.Docid;
					}
					return _Docid_W;
				}
			}

			public AggregateParameter Sopnumbe
		    {
				get
		        {
					if(_Sopnumbe_W == null)
	        	    {
						_Sopnumbe_W = TearOff.Sopnumbe;
					}
					return _Sopnumbe_W;
				}
			}

			public AggregateParameter Fechahora
		    {
				get
		        {
					if(_Fechahora_W == null)
	        	    {
						_Fechahora_W = TearOff.Fechahora;
					}
					return _Fechahora_W;
				}
			}

			public AggregateParameter CUSTNMBR
		    {
				get
		        {
					if(_CUSTNMBR_W == null)
	        	    {
						_CUSTNMBR_W = TearOff.CUSTNMBR;
					}
					return _CUSTNMBR_W;
				}
			}

			public AggregateParameter NombreCliente
		    {
				get
		        {
					if(_NombreCliente_W == null)
	        	    {
						_NombreCliente_W = TearOff.NombreCliente;
					}
					return _NombreCliente_W;
				}
			}

			public AggregateParameter IdImpuestoCliente
		    {
				get
		        {
					if(_IdImpuestoCliente_W == null)
	        	    {
						_IdImpuestoCliente_W = TearOff.IdImpuestoCliente;
					}
					return _IdImpuestoCliente_W;
				}
			}

			public AggregateParameter Total
		    {
				get
		        {
					if(_Total_W == null)
	        	    {
						_Total_W = TearOff.Total;
					}
					return _Total_W;
				}
			}

			public AggregateParameter MontoActualOriginal
		    {
				get
		        {
					if(_MontoActualOriginal_W == null)
	        	    {
						_MontoActualOriginal_W = TearOff.MontoActualOriginal;
					}
					return _MontoActualOriginal_W;
				}
			}

			public AggregateParameter Voidstts
		    {
				get
		        {
					if(_Voidstts_W == null)
	        	    {
						_Voidstts_W = TearOff.Voidstts;
					}
					return _Voidstts_W;
				}
			}

			public AggregateParameter Estado
		    {
				get
		        {
					if(_Estado_W == null)
	        	    {
						_Estado_W = TearOff.Estado;
					}
					return _Estado_W;
				}
			}

			public AggregateParameter Mensaje
		    {
				get
		        {
					if(_Mensaje_W == null)
	        	    {
						_Mensaje_W = TearOff.Mensaje;
					}
					return _Mensaje_W;
				}
			}

			public AggregateParameter ComprobanteXml
		    {
				get
		        {
					if(_ComprobanteXml_W == null)
	        	    {
						_ComprobanteXml_W = TearOff.ComprobanteXml;
					}
					return _ComprobanteXml_W;
				}
			}

			public AggregateParameter SelloCFD
		    {
				get
		        {
					if(_SelloCFD_W == null)
	        	    {
						_SelloCFD_W = TearOff.SelloCFD;
					}
					return _SelloCFD_W;
				}
			}

			public AggregateParameter FechaTimbrado
		    {
				get
		        {
					if(_FechaTimbrado_W == null)
	        	    {
						_FechaTimbrado_W = TearOff.FechaTimbrado;
					}
					return _FechaTimbrado_W;
				}
			}

			public AggregateParameter UUID
		    {
				get
		        {
					if(_UUID_W == null)
	        	    {
						_UUID_W = TearOff.UUID;
					}
					return _UUID_W;
				}
			}

			public AggregateParameter NoCertificadoSAT
		    {
				get
		        {
					if(_NoCertificadoSAT_W == null)
	        	    {
						_NoCertificadoSAT_W = TearOff.NoCertificadoSAT;
					}
					return _NoCertificadoSAT_W;
				}
			}

			public AggregateParameter Version
		    {
				get
		        {
					if(_Version_W == null)
	        	    {
						_Version_W = TearOff.Version;
					}
					return _Version_W;
				}
			}

			public AggregateParameter SelloSAT
		    {
				get
		        {
					if(_SelloSAT_W == null)
	        	    {
						_SelloSAT_W = TearOff.SelloSAT;
					}
					return _SelloSAT_W;
				}
			}

			public AggregateParameter FormaDePago
		    {
				get
		        {
					if(_FormaDePago_W == null)
	        	    {
						_FormaDePago_W = TearOff.FormaDePago;
					}
					return _FormaDePago_W;
				}
			}

			public AggregateParameter Sello
		    {
				get
		        {
					if(_Sello_W == null)
	        	    {
						_Sello_W = TearOff.Sello;
					}
					return _Sello_W;
				}
			}

			public AggregateParameter NoCertificado
		    {
				get
		        {
					if(_NoCertificado_W == null)
	        	    {
						_NoCertificado_W = TearOff.NoCertificado;
					}
					return _NoCertificado_W;
				}
			}

			public AggregateParameter CadenaOriginalSAT
		    {
				get
		        {
					if(_CadenaOriginalSAT_W == null)
	        	    {
						_CadenaOriginalSAT_W = TearOff.CadenaOriginalSAT;
					}
					return _CadenaOriginalSAT_W;
				}
			}

			public AggregateParameter ID_Certificado
		    {
				get
		        {
					if(_ID_Certificado_W == null)
	        	    {
						_ID_Certificado_W = TearOff.ID_Certificado;
					}
					return _ID_Certificado_W;
				}
			}

			public AggregateParameter Ruta_certificado
		    {
				get
		        {
					if(_Ruta_certificado_W == null)
	        	    {
						_Ruta_certificado_W = TearOff.Ruta_certificado;
					}
					return _Ruta_certificado_W;
				}
			}

			public AggregateParameter Ruta_clave
		    {
				get
		        {
					if(_Ruta_clave_W == null)
	        	    {
						_Ruta_clave_W = TearOff.Ruta_clave;
					}
					return _Ruta_clave_W;
				}
			}

			public AggregateParameter Contrasenia_clave
		    {
				get
		        {
					if(_Contrasenia_clave_W == null)
	        	    {
						_Contrasenia_clave_W = TearOff.Contrasenia_clave;
					}
					return _Contrasenia_clave_W;
				}
			}

			public AggregateParameter Ruta_certificadoPac
		    {
				get
		        {
					if(_Ruta_certificadoPac_W == null)
	        	    {
						_Ruta_certificadoPac_W = TearOff.Ruta_certificadoPac;
					}
					return _Ruta_certificadoPac_W;
				}
			}

			public AggregateParameter Ruta_clavePac
		    {
				get
		        {
					if(_Ruta_clavePac_W == null)
	        	    {
						_Ruta_clavePac_W = TearOff.Ruta_clavePac;
					}
					return _Ruta_clavePac_W;
				}
			}

			public AggregateParameter Contrasenia_clavePac
		    {
				get
		        {
					if(_Contrasenia_clavePac_W == null)
	        	    {
						_Contrasenia_clavePac_W = TearOff.Contrasenia_clavePac;
					}
					return _Contrasenia_clavePac_W;
				}
			}

			public AggregateParameter Rfc
		    {
				get
		        {
					if(_Rfc_W == null)
	        	    {
						_Rfc_W = TearOff.Rfc;
					}
					return _Rfc_W;
				}
			}

			public AggregateParameter Regimen
		    {
				get
		        {
					if(_Regimen_W == null)
	        	    {
						_Regimen_W = TearOff.Regimen;
					}
					return _Regimen_W;
				}
			}

			public AggregateParameter RutaXml
		    {
				get
		        {
					if(_RutaXml_W == null)
	        	    {
						_RutaXml_W = TearOff.RutaXml;
					}
					return _RutaXml_W;
				}
			}

			public AggregateParameter EstadoActual
		    {
				get
		        {
					if(_EstadoActual_W == null)
	        	    {
						_EstadoActual_W = TearOff.EstadoActual;
					}
					return _EstadoActual_W;
				}
			}

			public AggregateParameter MensajeEA
		    {
				get
		        {
					if(_MensajeEA_W == null)
	        	    {
						_MensajeEA_W = TearOff.MensajeEA;
					}
					return _MensajeEA_W;
				}
			}

			public AggregateParameter MetodoDePago
		    {
				get
		        {
					if(_MetodoDePago_W == null)
	        	    {
						_MetodoDePago_W = TearOff.MetodoDePago;
					}
					return _MetodoDePago_W;
				}
			}

			public AggregateParameter Isocurrc
		    {
				get
		        {
					if(_Isocurrc_W == null)
	        	    {
						_Isocurrc_W = TearOff.Isocurrc;
					}
					return _Isocurrc_W;
				}
			}

			private AggregateParameter _EstadoContabilizado_W = null;
			private AggregateParameter _Soptype_W = null;
			private AggregateParameter _Docid_W = null;
			private AggregateParameter _Sopnumbe_W = null;
			private AggregateParameter _Fechahora_W = null;
			private AggregateParameter _CUSTNMBR_W = null;
			private AggregateParameter _NombreCliente_W = null;
			private AggregateParameter _IdImpuestoCliente_W = null;
			private AggregateParameter _Total_W = null;
			private AggregateParameter _MontoActualOriginal_W = null;
			private AggregateParameter _Voidstts_W = null;
			private AggregateParameter _Estado_W = null;
			private AggregateParameter _Mensaje_W = null;
			private AggregateParameter _ComprobanteXml_W = null;
			private AggregateParameter _SelloCFD_W = null;
			private AggregateParameter _FechaTimbrado_W = null;
			private AggregateParameter _UUID_W = null;
			private AggregateParameter _NoCertificadoSAT_W = null;
			private AggregateParameter _Version_W = null;
			private AggregateParameter _SelloSAT_W = null;
			private AggregateParameter _FormaDePago_W = null;
			private AggregateParameter _Sello_W = null;
			private AggregateParameter _NoCertificado_W = null;
			private AggregateParameter _CadenaOriginalSAT_W = null;
			private AggregateParameter _ID_Certificado_W = null;
			private AggregateParameter _Ruta_certificado_W = null;
			private AggregateParameter _Ruta_clave_W = null;
			private AggregateParameter _Contrasenia_clave_W = null;
			private AggregateParameter _Ruta_certificadoPac_W = null;
			private AggregateParameter _Ruta_clavePac_W = null;
			private AggregateParameter _Contrasenia_clavePac_W = null;
			private AggregateParameter _Rfc_W = null;
			private AggregateParameter _Regimen_W = null;
			private AggregateParameter _RutaXml_W = null;
			private AggregateParameter _EstadoActual_W = null;
			private AggregateParameter _MensajeEA_W = null;
			private AggregateParameter _MetodoDePago_W = null;
			private AggregateParameter _Isocurrc_W = null;

			public void AggregateClauseReset()
			{
				_EstadoContabilizado_W = null;
				_Soptype_W = null;
				_Docid_W = null;
				_Sopnumbe_W = null;
				_Fechahora_W = null;
				_CUSTNMBR_W = null;
				_NombreCliente_W = null;
				_IdImpuestoCliente_W = null;
				_Total_W = null;
				_MontoActualOriginal_W = null;
				_Voidstts_W = null;
				_Estado_W = null;
				_Mensaje_W = null;
				_ComprobanteXml_W = null;
				_SelloCFD_W = null;
				_FechaTimbrado_W = null;
				_UUID_W = null;
				_NoCertificadoSAT_W = null;
				_Version_W = null;
				_SelloSAT_W = null;
				_FormaDePago_W = null;
				_Sello_W = null;
				_NoCertificado_W = null;
				_CadenaOriginalSAT_W = null;
				_ID_Certificado_W = null;
				_Ruta_certificado_W = null;
				_Ruta_clave_W = null;
				_Contrasenia_clave_W = null;
				_Ruta_certificadoPac_W = null;
				_Ruta_clavePac_W = null;
				_Contrasenia_clavePac_W = null;
				_Rfc_W = null;
				_Regimen_W = null;
				_RutaXml_W = null;
				_EstadoActual_W = null;
				_MensajeEA_W = null;
				_MetodoDePago_W = null;
				_Isocurrc_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
			return null;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
			return null;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
			return null;
		}
	}
}
