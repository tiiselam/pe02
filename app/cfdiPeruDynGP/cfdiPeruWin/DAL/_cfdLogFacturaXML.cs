
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace cfd.FacturaElectronica
{
	public abstract class _cfdLogFacturaXML : SqlClientEntity
	{
		public _cfdLogFacturaXML()
		{
			this.QuerySource = "cfdLogFacturaXML";
			this.MappingName = "cfdLogFacturaXML";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_cfdLogFacturaXMLLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(short Soptype, string Sopnumbe, int Secuencia)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.Soptype, Soptype);

parameters.Add(Parameters.Sopnumbe, Sopnumbe);

parameters.Add(Parameters.Secuencia, Secuencia);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_cfdLogFacturaXMLLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter Soptype
			{
				get
				{
					return new SqlParameter("@Soptype", SqlDbType.SmallInt, 0);
				}
			}
			
			public static SqlParameter Sopnumbe
			{
				get
				{
					return new SqlParameter("@Sopnumbe", SqlDbType.VarChar, 21);
				}
			}
			
			public static SqlParameter Secuencia
			{
				get
				{
					return new SqlParameter("@Secuencia", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Mensaje
			{
				get
				{
					return new SqlParameter("@Mensaje", SqlDbType.VarChar, 255);
				}
			}
			
			public static SqlParameter Estado
			{
				get
				{
					return new SqlParameter("@Estado", SqlDbType.VarChar, 20);
				}
			}
			
			public static SqlParameter NoAprobacion
			{
				get
				{
					return new SqlParameter("@NoAprobacion", SqlDbType.VarChar, 21);
				}
			}
			
			public static SqlParameter FechaEmision
			{
				get
				{
					return new SqlParameter("@FechaEmision", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter IdUsuario
			{
				get
				{
					return new SqlParameter("@IdUsuario", SqlDbType.VarChar, 10);
				}
			}
			
			public static SqlParameter FechaAnulacion
			{
				get
				{
					return new SqlParameter("@FechaAnulacion", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter IdUsuarioAnulacion
			{
				get
				{
					return new SqlParameter("@IdUsuarioAnulacion", SqlDbType.VarChar, 10);
				}
			}
			
			public static SqlParameter ArchivoXML
			{
				get
				{
					return new SqlParameter("@ArchivoXML", SqlDbType.Xml, 1073741823);
				}
			}
			
			public static SqlParameter EstadoActual
			{
				get
				{
					return new SqlParameter("@EstadoActual", SqlDbType.VarChar, 20);
				}
			}
			
			public static SqlParameter MensajeEA
			{
				get
				{
					return new SqlParameter("@MensajeEA", SqlDbType.VarChar, 255);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string Soptype = "soptype";
            public const string Sopnumbe = "sopnumbe";
            public const string Secuencia = "secuencia";
            public const string Mensaje = "mensaje";
            public const string Estado = "estado";
            public const string NoAprobacion = "noAprobacion";
            public const string FechaEmision = "fechaEmision";
            public const string IdUsuario = "idUsuario";
            public const string FechaAnulacion = "fechaAnulacion";
            public const string IdUsuarioAnulacion = "idUsuarioAnulacion";
            public const string ArchivoXML = "archivoXML";
            public const string EstadoActual = "estadoActual";
            public const string MensajeEA = "mensajeEA";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[Soptype] = _cfdLogFacturaXML.PropertyNames.Soptype;
					ht[Sopnumbe] = _cfdLogFacturaXML.PropertyNames.Sopnumbe;
					ht[Secuencia] = _cfdLogFacturaXML.PropertyNames.Secuencia;
					ht[Mensaje] = _cfdLogFacturaXML.PropertyNames.Mensaje;
					ht[Estado] = _cfdLogFacturaXML.PropertyNames.Estado;
					ht[NoAprobacion] = _cfdLogFacturaXML.PropertyNames.NoAprobacion;
					ht[FechaEmision] = _cfdLogFacturaXML.PropertyNames.FechaEmision;
					ht[IdUsuario] = _cfdLogFacturaXML.PropertyNames.IdUsuario;
					ht[FechaAnulacion] = _cfdLogFacturaXML.PropertyNames.FechaAnulacion;
					ht[IdUsuarioAnulacion] = _cfdLogFacturaXML.PropertyNames.IdUsuarioAnulacion;
					ht[ArchivoXML] = _cfdLogFacturaXML.PropertyNames.ArchivoXML;
					ht[EstadoActual] = _cfdLogFacturaXML.PropertyNames.EstadoActual;
					ht[MensajeEA] = _cfdLogFacturaXML.PropertyNames.MensajeEA;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string Soptype = "Soptype";
            public const string Sopnumbe = "Sopnumbe";
            public const string Secuencia = "Secuencia";
            public const string Mensaje = "Mensaje";
            public const string Estado = "Estado";
            public const string NoAprobacion = "NoAprobacion";
            public const string FechaEmision = "FechaEmision";
            public const string IdUsuario = "IdUsuario";
            public const string FechaAnulacion = "FechaAnulacion";
            public const string IdUsuarioAnulacion = "IdUsuarioAnulacion";
            public const string ArchivoXML = "ArchivoXML";
            public const string EstadoActual = "EstadoActual";
            public const string MensajeEA = "MensajeEA";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[Soptype] = _cfdLogFacturaXML.ColumnNames.Soptype;
					ht[Sopnumbe] = _cfdLogFacturaXML.ColumnNames.Sopnumbe;
					ht[Secuencia] = _cfdLogFacturaXML.ColumnNames.Secuencia;
					ht[Mensaje] = _cfdLogFacturaXML.ColumnNames.Mensaje;
					ht[Estado] = _cfdLogFacturaXML.ColumnNames.Estado;
					ht[NoAprobacion] = _cfdLogFacturaXML.ColumnNames.NoAprobacion;
					ht[FechaEmision] = _cfdLogFacturaXML.ColumnNames.FechaEmision;
					ht[IdUsuario] = _cfdLogFacturaXML.ColumnNames.IdUsuario;
					ht[FechaAnulacion] = _cfdLogFacturaXML.ColumnNames.FechaAnulacion;
					ht[IdUsuarioAnulacion] = _cfdLogFacturaXML.ColumnNames.IdUsuarioAnulacion;
					ht[ArchivoXML] = _cfdLogFacturaXML.ColumnNames.ArchivoXML;
					ht[EstadoActual] = _cfdLogFacturaXML.ColumnNames.EstadoActual;
					ht[MensajeEA] = _cfdLogFacturaXML.ColumnNames.MensajeEA;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string Soptype = "s_Soptype";
            public const string Sopnumbe = "s_Sopnumbe";
            public const string Secuencia = "s_Secuencia";
            public const string Mensaje = "s_Mensaje";
            public const string Estado = "s_Estado";
            public const string NoAprobacion = "s_NoAprobacion";
            public const string FechaEmision = "s_FechaEmision";
            public const string IdUsuario = "s_IdUsuario";
            public const string FechaAnulacion = "s_FechaAnulacion";
            public const string IdUsuarioAnulacion = "s_IdUsuarioAnulacion";
            public const string ArchivoXML = "s_ArchivoXML";
            public const string EstadoActual = "s_EstadoActual";
            public const string MensajeEA = "s_MensajeEA";

		}
		#endregion		
		
		#region Properties
	
		public virtual short Soptype
	    {
			get
	        {
				return base.Getshort(ColumnNames.Soptype);
			}
			set
	        {
				base.Setshort(ColumnNames.Soptype, value);
			}
		}

		public virtual string Sopnumbe
	    {
			get
	        {
				return base.Getstring(ColumnNames.Sopnumbe);
			}
			set
	        {
				base.Setstring(ColumnNames.Sopnumbe, value);
			}
		}

		public virtual int Secuencia
	    {
			get
	        {
				return base.Getint(ColumnNames.Secuencia);
			}
			set
	        {
				base.Setint(ColumnNames.Secuencia, value);
			}
		}

		public virtual string Mensaje
	    {
			get
	        {
				return base.Getstring(ColumnNames.Mensaje);
			}
			set
	        {
				base.Setstring(ColumnNames.Mensaje, value);
			}
		}

		public virtual string Estado
	    {
			get
	        {
				return base.Getstring(ColumnNames.Estado);
			}
			set
	        {
				base.Setstring(ColumnNames.Estado, value);
			}
		}

		public virtual string NoAprobacion
	    {
			get
	        {
				return base.Getstring(ColumnNames.NoAprobacion);
			}
			set
	        {
				base.Setstring(ColumnNames.NoAprobacion, value);
			}
		}

		public virtual DateTime FechaEmision
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.FechaEmision);
			}
			set
	        {
				base.SetDateTime(ColumnNames.FechaEmision, value);
			}
		}

		public virtual string IdUsuario
	    {
			get
	        {
				return base.Getstring(ColumnNames.IdUsuario);
			}
			set
	        {
				base.Setstring(ColumnNames.IdUsuario, value);
			}
		}

		public virtual DateTime FechaAnulacion
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.FechaAnulacion);
			}
			set
	        {
				base.SetDateTime(ColumnNames.FechaAnulacion, value);
			}
		}

		public virtual string IdUsuarioAnulacion
	    {
			get
	        {
				return base.Getstring(ColumnNames.IdUsuarioAnulacion);
			}
			set
	        {
				base.Setstring(ColumnNames.IdUsuarioAnulacion, value);
			}
		}

		public virtual string ArchivoXML
	    {
			get
	        {
				return base.Getstring(ColumnNames.ArchivoXML);
			}
			set
	        {
				base.Setstring(ColumnNames.ArchivoXML, value);
			}
		}

		public virtual string EstadoActual
	    {
			get
	        {
				return base.Getstring(ColumnNames.EstadoActual);
			}
			set
	        {
				base.Setstring(ColumnNames.EstadoActual, value);
			}
		}

		public virtual string MensajeEA
	    {
			get
	        {
				return base.Getstring(ColumnNames.MensajeEA);
			}
			set
	        {
				base.Setstring(ColumnNames.MensajeEA, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_Soptype
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Soptype) ? string.Empty : base.GetshortAsString(ColumnNames.Soptype);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Soptype);
				else
					this.Soptype = base.SetshortAsString(ColumnNames.Soptype, value);
			}
		}

		public virtual string s_Sopnumbe
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Sopnumbe) ? string.Empty : base.GetstringAsString(ColumnNames.Sopnumbe);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Sopnumbe);
				else
					this.Sopnumbe = base.SetstringAsString(ColumnNames.Sopnumbe, value);
			}
		}

		public virtual string s_Secuencia
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Secuencia) ? string.Empty : base.GetintAsString(ColumnNames.Secuencia);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Secuencia);
				else
					this.Secuencia = base.SetintAsString(ColumnNames.Secuencia, value);
			}
		}

		public virtual string s_Mensaje
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Mensaje) ? string.Empty : base.GetstringAsString(ColumnNames.Mensaje);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Mensaje);
				else
					this.Mensaje = base.SetstringAsString(ColumnNames.Mensaje, value);
			}
		}

		public virtual string s_Estado
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Estado) ? string.Empty : base.GetstringAsString(ColumnNames.Estado);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Estado);
				else
					this.Estado = base.SetstringAsString(ColumnNames.Estado, value);
			}
		}

		public virtual string s_NoAprobacion
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.NoAprobacion) ? string.Empty : base.GetstringAsString(ColumnNames.NoAprobacion);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.NoAprobacion);
				else
					this.NoAprobacion = base.SetstringAsString(ColumnNames.NoAprobacion, value);
			}
		}

		public virtual string s_FechaEmision
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FechaEmision) ? string.Empty : base.GetDateTimeAsString(ColumnNames.FechaEmision);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FechaEmision);
				else
					this.FechaEmision = base.SetDateTimeAsString(ColumnNames.FechaEmision, value);
			}
		}

		public virtual string s_IdUsuario
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IdUsuario) ? string.Empty : base.GetstringAsString(ColumnNames.IdUsuario);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IdUsuario);
				else
					this.IdUsuario = base.SetstringAsString(ColumnNames.IdUsuario, value);
			}
		}

		public virtual string s_FechaAnulacion
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FechaAnulacion) ? string.Empty : base.GetDateTimeAsString(ColumnNames.FechaAnulacion);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FechaAnulacion);
				else
					this.FechaAnulacion = base.SetDateTimeAsString(ColumnNames.FechaAnulacion, value);
			}
		}

		public virtual string s_IdUsuarioAnulacion
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IdUsuarioAnulacion) ? string.Empty : base.GetstringAsString(ColumnNames.IdUsuarioAnulacion);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IdUsuarioAnulacion);
				else
					this.IdUsuarioAnulacion = base.SetstringAsString(ColumnNames.IdUsuarioAnulacion, value);
			}
		}

		public virtual string s_ArchivoXML
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ArchivoXML) ? string.Empty : base.GetstringAsString(ColumnNames.ArchivoXML);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ArchivoXML);
				else
					this.ArchivoXML = base.SetstringAsString(ColumnNames.ArchivoXML, value);
			}
		}

		public virtual string s_EstadoActual
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.EstadoActual) ? string.Empty : base.GetstringAsString(ColumnNames.EstadoActual);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.EstadoActual);
				else
					this.EstadoActual = base.SetstringAsString(ColumnNames.EstadoActual, value);
			}
		}

		public virtual string s_MensajeEA
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.MensajeEA) ? string.Empty : base.GetstringAsString(ColumnNames.MensajeEA);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.MensajeEA);
				else
					this.MensajeEA = base.SetstringAsString(ColumnNames.MensajeEA, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter Soptype
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Soptype, Parameters.Soptype);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Sopnumbe
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Sopnumbe, Parameters.Sopnumbe);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Secuencia
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Secuencia, Parameters.Secuencia);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Mensaje
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Mensaje, Parameters.Mensaje);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Estado
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Estado, Parameters.Estado);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter NoAprobacion
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.NoAprobacion, Parameters.NoAprobacion);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FechaEmision
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FechaEmision, Parameters.FechaEmision);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IdUsuario
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IdUsuario, Parameters.IdUsuario);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FechaAnulacion
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FechaAnulacion, Parameters.FechaAnulacion);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IdUsuarioAnulacion
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IdUsuarioAnulacion, Parameters.IdUsuarioAnulacion);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ArchivoXML
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ArchivoXML, Parameters.ArchivoXML);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter EstadoActual
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.EstadoActual, Parameters.EstadoActual);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter MensajeEA
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.MensajeEA, Parameters.MensajeEA);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter Soptype
		    {
				get
		        {
					if(_Soptype_W == null)
	        	    {
						_Soptype_W = TearOff.Soptype;
					}
					return _Soptype_W;
				}
			}

			public WhereParameter Sopnumbe
		    {
				get
		        {
					if(_Sopnumbe_W == null)
	        	    {
						_Sopnumbe_W = TearOff.Sopnumbe;
					}
					return _Sopnumbe_W;
				}
			}

			public WhereParameter Secuencia
		    {
				get
		        {
					if(_Secuencia_W == null)
	        	    {
						_Secuencia_W = TearOff.Secuencia;
					}
					return _Secuencia_W;
				}
			}

			public WhereParameter Mensaje
		    {
				get
		        {
					if(_Mensaje_W == null)
	        	    {
						_Mensaje_W = TearOff.Mensaje;
					}
					return _Mensaje_W;
				}
			}

			public WhereParameter Estado
		    {
				get
		        {
					if(_Estado_W == null)
	        	    {
						_Estado_W = TearOff.Estado;
					}
					return _Estado_W;
				}
			}

			public WhereParameter NoAprobacion
		    {
				get
		        {
					if(_NoAprobacion_W == null)
	        	    {
						_NoAprobacion_W = TearOff.NoAprobacion;
					}
					return _NoAprobacion_W;
				}
			}

			public WhereParameter FechaEmision
		    {
				get
		        {
					if(_FechaEmision_W == null)
	        	    {
						_FechaEmision_W = TearOff.FechaEmision;
					}
					return _FechaEmision_W;
				}
			}

			public WhereParameter IdUsuario
		    {
				get
		        {
					if(_IdUsuario_W == null)
	        	    {
						_IdUsuario_W = TearOff.IdUsuario;
					}
					return _IdUsuario_W;
				}
			}

			public WhereParameter FechaAnulacion
		    {
				get
		        {
					if(_FechaAnulacion_W == null)
	        	    {
						_FechaAnulacion_W = TearOff.FechaAnulacion;
					}
					return _FechaAnulacion_W;
				}
			}

			public WhereParameter IdUsuarioAnulacion
		    {
				get
		        {
					if(_IdUsuarioAnulacion_W == null)
	        	    {
						_IdUsuarioAnulacion_W = TearOff.IdUsuarioAnulacion;
					}
					return _IdUsuarioAnulacion_W;
				}
			}

			public WhereParameter ArchivoXML
		    {
				get
		        {
					if(_ArchivoXML_W == null)
	        	    {
						_ArchivoXML_W = TearOff.ArchivoXML;
					}
					return _ArchivoXML_W;
				}
			}

			public WhereParameter EstadoActual
		    {
				get
		        {
					if(_EstadoActual_W == null)
	        	    {
						_EstadoActual_W = TearOff.EstadoActual;
					}
					return _EstadoActual_W;
				}
			}

			public WhereParameter MensajeEA
		    {
				get
		        {
					if(_MensajeEA_W == null)
	        	    {
						_MensajeEA_W = TearOff.MensajeEA;
					}
					return _MensajeEA_W;
				}
			}

			private WhereParameter _Soptype_W = null;
			private WhereParameter _Sopnumbe_W = null;
			private WhereParameter _Secuencia_W = null;
			private WhereParameter _Mensaje_W = null;
			private WhereParameter _Estado_W = null;
			private WhereParameter _NoAprobacion_W = null;
			private WhereParameter _FechaEmision_W = null;
			private WhereParameter _IdUsuario_W = null;
			private WhereParameter _FechaAnulacion_W = null;
			private WhereParameter _IdUsuarioAnulacion_W = null;
			private WhereParameter _ArchivoXML_W = null;
			private WhereParameter _EstadoActual_W = null;
			private WhereParameter _MensajeEA_W = null;

			public void WhereClauseReset()
			{
				_Soptype_W = null;
				_Sopnumbe_W = null;
				_Secuencia_W = null;
				_Mensaje_W = null;
				_Estado_W = null;
				_NoAprobacion_W = null;
				_FechaEmision_W = null;
				_IdUsuario_W = null;
				_FechaAnulacion_W = null;
				_IdUsuarioAnulacion_W = null;
				_ArchivoXML_W = null;
				_EstadoActual_W = null;
				_MensajeEA_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter Soptype
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Soptype, Parameters.Soptype);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Sopnumbe
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Sopnumbe, Parameters.Sopnumbe);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Secuencia
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Secuencia, Parameters.Secuencia);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Mensaje
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Mensaje, Parameters.Mensaje);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Estado
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Estado, Parameters.Estado);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter NoAprobacion
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.NoAprobacion, Parameters.NoAprobacion);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FechaEmision
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FechaEmision, Parameters.FechaEmision);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IdUsuario
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IdUsuario, Parameters.IdUsuario);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FechaAnulacion
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FechaAnulacion, Parameters.FechaAnulacion);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IdUsuarioAnulacion
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IdUsuarioAnulacion, Parameters.IdUsuarioAnulacion);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ArchivoXML
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ArchivoXML, Parameters.ArchivoXML);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter EstadoActual
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.EstadoActual, Parameters.EstadoActual);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter MensajeEA
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.MensajeEA, Parameters.MensajeEA);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter Soptype
		    {
				get
		        {
					if(_Soptype_W == null)
	        	    {
						_Soptype_W = TearOff.Soptype;
					}
					return _Soptype_W;
				}
			}

			public AggregateParameter Sopnumbe
		    {
				get
		        {
					if(_Sopnumbe_W == null)
	        	    {
						_Sopnumbe_W = TearOff.Sopnumbe;
					}
					return _Sopnumbe_W;
				}
			}

			public AggregateParameter Secuencia
		    {
				get
		        {
					if(_Secuencia_W == null)
	        	    {
						_Secuencia_W = TearOff.Secuencia;
					}
					return _Secuencia_W;
				}
			}

			public AggregateParameter Mensaje
		    {
				get
		        {
					if(_Mensaje_W == null)
	        	    {
						_Mensaje_W = TearOff.Mensaje;
					}
					return _Mensaje_W;
				}
			}

			public AggregateParameter Estado
		    {
				get
		        {
					if(_Estado_W == null)
	        	    {
						_Estado_W = TearOff.Estado;
					}
					return _Estado_W;
				}
			}

			public AggregateParameter NoAprobacion
		    {
				get
		        {
					if(_NoAprobacion_W == null)
	        	    {
						_NoAprobacion_W = TearOff.NoAprobacion;
					}
					return _NoAprobacion_W;
				}
			}

			public AggregateParameter FechaEmision
		    {
				get
		        {
					if(_FechaEmision_W == null)
	        	    {
						_FechaEmision_W = TearOff.FechaEmision;
					}
					return _FechaEmision_W;
				}
			}

			public AggregateParameter IdUsuario
		    {
				get
		        {
					if(_IdUsuario_W == null)
	        	    {
						_IdUsuario_W = TearOff.IdUsuario;
					}
					return _IdUsuario_W;
				}
			}

			public AggregateParameter FechaAnulacion
		    {
				get
		        {
					if(_FechaAnulacion_W == null)
	        	    {
						_FechaAnulacion_W = TearOff.FechaAnulacion;
					}
					return _FechaAnulacion_W;
				}
			}

			public AggregateParameter IdUsuarioAnulacion
		    {
				get
		        {
					if(_IdUsuarioAnulacion_W == null)
	        	    {
						_IdUsuarioAnulacion_W = TearOff.IdUsuarioAnulacion;
					}
					return _IdUsuarioAnulacion_W;
				}
			}

			public AggregateParameter ArchivoXML
		    {
				get
		        {
					if(_ArchivoXML_W == null)
	        	    {
						_ArchivoXML_W = TearOff.ArchivoXML;
					}
					return _ArchivoXML_W;
				}
			}

			public AggregateParameter EstadoActual
		    {
				get
		        {
					if(_EstadoActual_W == null)
	        	    {
						_EstadoActual_W = TearOff.EstadoActual;
					}
					return _EstadoActual_W;
				}
			}

			public AggregateParameter MensajeEA
		    {
				get
		        {
					if(_MensajeEA_W == null)
	        	    {
						_MensajeEA_W = TearOff.MensajeEA;
					}
					return _MensajeEA_W;
				}
			}

			private AggregateParameter _Soptype_W = null;
			private AggregateParameter _Sopnumbe_W = null;
			private AggregateParameter _Secuencia_W = null;
			private AggregateParameter _Mensaje_W = null;
			private AggregateParameter _Estado_W = null;
			private AggregateParameter _NoAprobacion_W = null;
			private AggregateParameter _FechaEmision_W = null;
			private AggregateParameter _IdUsuario_W = null;
			private AggregateParameter _FechaAnulacion_W = null;
			private AggregateParameter _IdUsuarioAnulacion_W = null;
			private AggregateParameter _ArchivoXML_W = null;
			private AggregateParameter _EstadoActual_W = null;
			private AggregateParameter _MensajeEA_W = null;

			public void AggregateClauseReset()
			{
				_Soptype_W = null;
				_Sopnumbe_W = null;
				_Secuencia_W = null;
				_Mensaje_W = null;
				_Estado_W = null;
				_NoAprobacion_W = null;
				_FechaEmision_W = null;
				_IdUsuario_W = null;
				_FechaAnulacion_W = null;
				_IdUsuarioAnulacion_W = null;
				_ArchivoXML_W = null;
				_EstadoActual_W = null;
				_MensajeEA_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_cfdLogFacturaXMLInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.Secuencia.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_cfdLogFacturaXMLUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_cfdLogFacturaXMLDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.Soptype);
			p.SourceColumn = ColumnNames.Soptype;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Sopnumbe);
			p.SourceColumn = ColumnNames.Sopnumbe;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Secuencia);
			p.SourceColumn = ColumnNames.Secuencia;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.Soptype);
			p.SourceColumn = ColumnNames.Soptype;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Sopnumbe);
			p.SourceColumn = ColumnNames.Sopnumbe;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Secuencia);
			p.SourceColumn = ColumnNames.Secuencia;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Mensaje);
			p.SourceColumn = ColumnNames.Mensaje;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Estado);
			p.SourceColumn = ColumnNames.Estado;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.NoAprobacion);
			p.SourceColumn = ColumnNames.NoAprobacion;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FechaEmision);
			p.SourceColumn = ColumnNames.FechaEmision;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IdUsuario);
			p.SourceColumn = ColumnNames.IdUsuario;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FechaAnulacion);
			p.SourceColumn = ColumnNames.FechaAnulacion;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IdUsuarioAnulacion);
			p.SourceColumn = ColumnNames.IdUsuarioAnulacion;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ArchivoXML);
			p.SourceColumn = ColumnNames.ArchivoXML;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.EstadoActual);
			p.SourceColumn = ColumnNames.EstadoActual;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.MensajeEA);
			p.SourceColumn = ColumnNames.MensajeEA;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
